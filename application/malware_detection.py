import customtkinter
import os
import joblib
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from scipy.sparse import csr_matrix
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import pickle
import tkinter as tk
from tkinter import messagebox
from tkinter import filedialog
from PIL import Image

home_text = "Bienvenue dans notre programme de détection de logiciels malveillants !\n\n\
Notre logiciel utilise une technologie de pointe pour analyser les appels d'API contenus dans un fichier Windows. Grâce à notre algorithme de prédiction avancé, nous sommes en mesure de déterminer si ces appels d'API correspondent à ceux d'un malware parmi plusieurs catégories, telles que les Spywares, Downloaders, Trojans, Worms, Adwares, Droppers, Virus et Backdoors.\n\n\
La détection des logiciels malveillants est un défi complexe, mais notre programme s'appuie sur une base de données exhaustive de modèles de comportement malveillant pour effectuer ses analyses. En utilisant des techniques d'apprentissage automatique, notre algorithme est capable de reconnaître les schémas et les caractéristiques spécifiques associées à chaque type de malware.\n\n\
L'interface conviviale de notre programme vous permet de charger facilement un fichier contenant les appels d'API que vous souhaitez analyser. Une fois le fichier chargé, notre logiciel examine attentivement les appels d'API et les compare à notre base de données de modèles malveillants. En quelques instants, vous obtiendrez un rapport détaillé indiquant si les appels d'API correspondent à un malware et, le cas échéant, à quelle catégorie il appartient.\n\n\
La détection précoce des logiciels malveillants est essentielle pour protéger votre système et vos données sensibles. Notre programme est conçu pour vous aider à identifier rapidement les menaces potentielles et à prendre les mesures nécessaires pour les éliminer.\n\n\
Que vous soyez un utilisateur individuel ou une entreprise soucieuse de la sécurité, notre logiciel de détection de logiciels malveillants vous offre une solution fiable et efficace. Profitez de la tranquillité d'esprit en sachant que votre système est protégé contre les menaces les plus récentes et les plus sophistiquées.\n\n\
N'hésitez pas à charger vos fichiers contenant des appels d'API et à utiliser notre programme de détection de logiciels malveillants. Nous sommes convaincus que vous serez impressionné par la précision et la fiabilité de nos résultats.\
Protégez-vous contre les logiciels malveillants dès maintenant en utilisant notre programme de détection de pointe.\n\n"

class App(customtkinter.CTk):
    def __init__(self):
        super().__init__()

        self.change_appearance_mode_event("Dark")
        self.load_model("Random Forest")
        self.file_loaded = 0
        self.title("Malware detection")
        self.geometry("700x450")

        # set grid layout 1x2
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

        # load images with light and dark mode image
        image_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "images")
        self.logo_image = customtkinter.CTkImage(Image.open(os.path.join(image_path, "bug_colored.png")), size=(56, 56))
        self.image_icon_image = customtkinter.CTkImage(Image.open(os.path.join(image_path, "bug_dark.png")), size=(20, 20))
        self.home_image = customtkinter.CTkImage(light_image=Image.open(os.path.join(image_path, "info_dark.png")),
                                                 dark_image=Image.open(os.path.join(image_path, "info_white.png")), size=(20, 20))
        self.performance = customtkinter.CTkImage(light_image=Image.open(os.path.join(image_path, "chart_dark.png")),
                                                 dark_image=Image.open(os.path.join(image_path, "chart_white.png")), size=(20, 20))
        self.prediction = customtkinter.CTkImage(light_image=Image.open(os.path.join(image_path, "glass_dark.png")),
                                                     dark_image=Image.open(os.path.join(image_path, "glass_white.png")), size=(20, 20))

        self.logo_trojan = customtkinter.CTkImage(Image.open(os.path.join(image_path, "logo_trojan.png")), size=(56, 56))
        self.logo_virus = customtkinter.CTkImage(Image.open(os.path.join(image_path, "logo_virus.png")), size=(56, 56))
        self.logo_worms = customtkinter.CTkImage(Image.open(os.path.join(image_path, "logo_worms.png")), size=(56, 56))
        self.logo_spyware = customtkinter.CTkImage(Image.open(os.path.join(image_path, "logo_spyware.png")), size=(56, 56))
        self.logo_downloader = customtkinter.CTkImage(Image.open(os.path.join(image_path, "logo_downloader.png")), size=(56, 56))
        self.logo_dropper = customtkinter.CTkImage(Image.open(os.path.join(image_path, "logo_dropper.png")), size=(56, 56))
        self.logo_backdoor = customtkinter.CTkImage(Image.open(os.path.join(image_path, "logo_backdoor.png")), size=(56, 56))
        self.logo_adware = customtkinter.CTkImage(Image.open(os.path.join(image_path, "logo_adware.png")), size=(56, 56))

        # create navigation frame
        self.navigation_frame = customtkinter.CTkFrame(self, corner_radius=0)
        self.navigation_frame.grid(row=0, column=0, sticky="nsew")
        self.navigation_frame.grid_rowconfigure(4, weight=1)

        self.navigation_frame_label = customtkinter.CTkLabel(self.navigation_frame, text="  Malware detection", image=self.logo_image,
                                                             compound="left", font=customtkinter.CTkFont(size=15, weight="bold"))
        self.navigation_frame_label.grid(row=0, column=0, padx=20, pady=20)

        self.home_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Informations",
                                                   fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                                   image=self.home_image, anchor="w", command=self.home_button_event)
        self.home_button.grid(row=1, column=0, sticky="ew")

        self.frame_2_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Performance du modèle",
                                                      fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                                      image=self.performance, anchor="w", command=self.frame_2_button_event)
        self.frame_2_button.grid(row=2, column=0, sticky="ew")

        self.frame_3_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Prédiction",
                                                      fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                                      image=self.prediction, anchor="w", command=self.frame_3_button_event)
        self.frame_3_button.grid(row=3, column=0, sticky="ew")

        self.appearance_mode_menu = customtkinter.CTkOptionMenu(self.navigation_frame, values=["Dark", "Light", "System"],
                                                                command=self.change_appearance_mode_event)
        self.appearance_mode_menu.grid(row=6, column=0, padx=20, pady=20, sticky="s")

        # create home frame
        self.home_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.home_frame.grid_columnconfigure(0, weight=1)
        self.home_frame.grid_rowconfigure(0, weight=1)#

        self.textbox = customtkinter.CTkTextbox(self.home_frame)
        self.textbox.grid(row=0, column=0, padx=(30, 30), pady=(30, 30), sticky="nsew")
        self.textbox.insert("0.0", home_text)
        self.textbox.configure(state="disabled")

        # create second frame
        self.second_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.second_frame.grid_columnconfigure(0, weight=1)
        self.second_frame.grid_rowconfigure(0, weight=1)#

        self.tabview = customtkinter.CTkTabview(master=self.second_frame)
        self.tabview.grid(row=0, column=0, padx=(30, 30), pady=(30, 30), sticky="nsew")

        self.tabview.add("RMC")  # add tab at the end
        self.load_rmc_tab()

        self.tabview.add("SVM")  # add tab at the end
        self.load_svm_tab()

        self.tabview.add("AdaBoost")  # add tab at the end
        self.load_ada_boost_tab()

        self.tabview.add("XGBoost")  # add tab at the end
        self.load_xg_boost_tab()

        self.tabview.add("MLPC")  # add tab at the end
        self.load_mlpc_tab()

        self.tabview.set("RMC")  # set currently visible tab

        # create third frame
        self.third_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.third_frame.grid_columnconfigure(0, weight=1)
        #the four next elements have to be dispached verticlayy uniformément
        self.third_frame.grid_rowconfigure(0, weight=1)
        self.third_frame.grid_rowconfigure(1, weight=1)
        self.third_frame.grid_rowconfigure(2, weight=1)
        self.third_frame.grid_rowconfigure(3, weight=1)
        self.third_frame.grid_rowconfigure(4, weight=1)
        self.third_frame.grid_rowconfigure(5, weight=1)
        self.third_frame.grid_rowconfigure(6, weight=1)
        self.third_frame.grid_rowconfigure(7, weight=1)
        self.third_frame.grid_rowconfigure(8, weight=1)
        self.third_frame.grid_rowconfigure(9, weight=1)

        self.third_frame_list_1 = customtkinter.CTkOptionMenu(self.third_frame, values=["Random Forest", "Support Vector Machines", "AdaBoost", "XGBoost", "Multi-layer Perceptron"],
                                                                command=self.load_model)
        self.third_frame_list_1.grid(row=3, column=0, padx=20, pady=10)
       
        self.third_frame_button_2 = customtkinter.CTkButton(self.third_frame, 
                                                            text="Charger un fichier",
                                                            command=self.load_file)
        self.third_frame_button_2.grid(row=4, column=0, padx=20, pady=10)
        
        self.third_frame_button_3 = customtkinter.CTkButton(self.third_frame, 
                                                            text="Analyser",
                                                           command=self.predict)
        self.third_frame_button_3.grid(row=5, column=0, padx=20, pady=10)

        self.third_frame_button_4 = customtkinter.CTkLabel(self.third_frame, text="",
                                                           compound="left", 
                                                           text_color="red", 
                                                           font=customtkinter.CTkFont(size=15, weight="bold"))
        
        self.third_frame_button_4.grid(row=6, column=0, padx=20, pady=10)

    def load_rmc_tab(self):
        self.tabview_frame_RMC = self.tabview.tab("RMC")

        # Create the table content as a list of lists
        table_data = [
        ["", "precision", "recall", "f1-score", "support"],
        ["0", "0.94", "0.60", "0.73", "226"],
        ["1", "0.99", "1.00", "0.99", "8550"],
        ["accuracy", "0.99", "", "", "8776"],
        ["macro avg", "0.97", "0.80", "0.86", "8776"],
        ["weighted avg", "0.99", "0.99", "0.99", "8776"],
        ]

        """
        table_data = [
            ["", "precision", "recall", "f1-score", "support"],
            ["Adware", "0.90", "0.87", "0.89", "71"],
            ["Backdoor", "0.73", "0.72", "0.73", "203"],
            ["Downloader", "0.78", "0.73", "0.75", "199"],
            ["Dropper", "0.59", "0.70", "0.64", "181"],
            ["Spyware", "0.55", "0.56", "0.55", "162"],
            ["Trojan", "0.55", "0.48", "0.51", "200"],
            ["Virus", "0.79", "0.85", "0.82", "195"],
            ["Worms", "0.71", "0.68", "0.70", "211"],
            ["accuracy", "", "", "0.69", "1422"],
            ["macro avg", "0.70", "0.70", "0.70", "1422"],
            ["weighted avg", "0.69", "0.69", "0.69", "1422"],
        ]
        """

        # Iterate over the table_data and create labels for each cell
        for i, row in enumerate(table_data):
            for j, cell in enumerate(row):
                label = customtkinter.CTkLabel(self.tabview_frame_RMC, text=cell)
                label.grid(row=i, column=j, sticky="nsew")

        # Configure grid weights to make the table expandable
        for i in range(len(table_data)):
            self.tabview_frame_RMC.grid_rowconfigure(i, weight=1)
        for j in range(len(table_data[0])):
            self.tabview_frame_RMC.grid_columnconfigure(j, weight=1)

    def load_svm_tab(self):
        self.tabview_frame_SVM = self.tabview.tab("SVM")

        # Create the table content as a list of lists
        table_data = [
        ["", "precision", "recall", "f1-score", "support"],
        ["0", "1.00", "0.46", "0.63", "226"],
        ["1", "0.99", "1.00", "0.99", "8550"],
        ["accuracy", "0.99", "", "", "8776"],
        ["macro avg", "0.99", "0.73", "0.81", "8776"],
        ["weighted avg", "0.99", "0.99", "0.98", "8776"],
        ]


        # Iterate over the table_data and create labels for each cell
        for i, row in enumerate(table_data):
            for j, cell in enumerate(row):
                label = customtkinter.CTkLabel(self.tabview_frame_SVM, text=cell)
                label.grid(row=i, column=j, sticky="nsew")

        # Configure grid weights to make the table expandable
        for i in range(len(table_data)):
            self.tabview_frame_SVM.grid_rowconfigure(i, weight=1)
        for j in range(len(table_data[0])):
            self.tabview_frame_SVM.grid_columnconfigure(j, weight=1)

    def load_ada_boost_tab(self):
        self.tabview_frame_ada_boost = self.tabview.tab("AdaBoost")

        # Create the table content as a list of lists
        table_data = [
        ["", "precision", "recall", "f1-score", "support"],
        ["0", "0.81", "0.46", "0.58", "226"],
        ["1", "0.99", "1.00", "0.99", "8550"],
        ["accuracy", "0.98", "", "", "8776"],
        ["macro avg", "0.90", "0.73", "0.79", "8776"],
        ["weighted avg", "0.98", "0.98", "0.98", "8776"],
        ]



        # Iterate over the table_data and create labels for each cell
        for i, row in enumerate(table_data):
            for j, cell in enumerate(row):
                label = customtkinter.CTkLabel(self.tabview_frame_ada_boost, text=cell)
                label.grid(row=i, column=j, sticky="nsew")

        # Configure grid weights to make the table expandable
        for i in range(len(table_data)):
            self.tabview_frame_ada_boost.grid_rowconfigure(i, weight=1)
        for j in range(len(table_data[0])):
            self.tabview_frame_ada_boost.grid_columnconfigure(j, weight=1)

    def load_xg_boost_tab(self):
        self.tabview_frame_xg_boost = self.tabview.tab("XGBoost")

        # Create the table content as a list of lists
        table_data = [
        ["", "precision", "recall", "f1-score", "support"],
        ["0", "0.97", "0.64", "0.77", "226"],
        ["1", "0.99", "1.00", "0.99", "8550"],
        ["accuracy", "0.99", "", "", "8776"],
        ["macro avg", "0.98", "0.82", "0.88", "8776"],
        ["weighted avg", "0.99", "0.99", "0.99", "8776"],
        ]


        # Iterate over the table_data and create labels for each cell
        for i, row in enumerate(table_data):
            for j, cell in enumerate(row):
                label = customtkinter.CTkLabel(self.tabview_frame_xg_boost, text=cell)
                label.grid(row=i, column=j, sticky="nsew")

        # Configure grid weights to make the table expandable
        for i in range(len(table_data)):
            self.tabview_frame_xg_boost.grid_rowconfigure(i, weight=1)
        for j in range(len(table_data[0])):
            self.tabview_frame_xg_boost.grid_columnconfigure(j, weight=1)

    def load_mlpc_tab(self):
        self.tabview_frame_mlpc = self.tabview.tab("MLPC")

        # Create the table content as a list of lists
        table_data = [
        ["", "precision", "recall", "f1-score", "support"],
        ["0", "0.90", "0.54", "0.68", "226"],
        ["1", "0.99", "1.00", "0.99", "8550"],
        ["accuracy", "0.99", "", "", "8776"],
        ["macro avg", "0.95", "0.77", "0.84", "8776"],
        ["weighted avg", "0.99", "0.99", "0.99", "8776"],
        ]

        # Iterate over the table_data and create labels for each cell
        for i, row in enumerate(table_data):
            for j, cell in enumerate(row):
                label = customtkinter.CTkLabel(self.tabview_frame_mlpc, text=cell)
                label.grid(row=i, column=j, sticky="nsew")

        # Configure grid weights to make the table expandable
        for i in range(len(table_data)):
            self.tabview_frame_mlpc.grid_rowconfigure(i, weight=1)
        for j in range(len(table_data[0])):
            self.tabview_frame_mlpc.grid_columnconfigure(j, weight=1)

    def load_model(self, type):

        print("choosed : ", type)

        if type=="Random Forest":
            # Load the trained Random Forest model
            self.model = joblib.load('./model_detection/RM.pkl')
        elif type=="Multi-layer Perceptron":
            #import MLPC model
            self.model = joblib.load('./model_detection/MLPC.pkl')
        elif type=="Support Vector Machines":
            #import SVM model
            self.model = joblib.load('./model_detection/SVM.pkl')
        elif type=="AdaBoost":
            #import AdaBoost model
            self.model = joblib.load('./model_detection/AdaBoost.pkl')
        elif type =="XGBoost":
            #import XGBoost model
            self.model = joblib.load('./model_detection/XGBoost.pkl')
        else:
            print("the model specified is not recognized")
            return

        """
        #import vectorizer
        with open('./model/vectorizer.pkl', 'rb') as file:
            self.vectorizer = pickle.load(file)
        """

    def load_file(self):
        root = tk.Tk()
        root.withdraw()  # Cache la fenêtre principale de tkinter
        file_path = filedialog.askopenfilename()
        self.data = pd.read_csv(file_path, header=None)
        self.file_loaded = 1

    def predict(self):
        if self.file_loaded == 0:
            messagebox.showinfo("Erreur", "Veuillez d'abord choisir un fichier")
            return
        
        # Conversion des données d'entrée en format numérique
        dataset = self.data.astype(int)

        #prediction
        #X = self.vectorizer.transform(self.data.values[0])
        y_pred = self.model.predict(dataset)
        print(str(y_pred[0]))

        if str(y_pred[0])=='0':
            self.third_frame_button_4.configure(text="      Malware detected", text_color="#1E6AA4", image=self.logo_virus)
        else:
            self.third_frame_button_4.configure(text="No malware detected !", text_color="green")
            
    def select_frame_by_name(self, name):
        # set button color for selected button
        self.home_button.configure(fg_color=("gray75", "gray25") if name == "Informations" else "transparent")
        self.frame_2_button.configure(fg_color=("gray75", "gray25") if name == "performance_du_modèle" else "transparent")
        self.frame_3_button.configure(fg_color=("gray75", "gray25") if name == "Prédiction" else "transparent")

        # show selected frame
        if name == "Informations":
            self.home_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.home_frame.grid_forget()
        if name == "performance_du_modèle":
            self.second_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.second_frame.grid_forget()
        if name == "Prédiction":
            self.third_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.third_frame.grid_forget()

    def home_button_event(self):
        self.select_frame_by_name("Informations")

    def frame_2_button_event(self):
        self.select_frame_by_name("performance_du_modèle")

    def frame_3_button_event(self):
        self.select_frame_by_name("Prédiction")

    def change_appearance_mode_event(self, new_appearance_mode):
        customtkinter.set_appearance_mode(new_appearance_mode)


if __name__ == "__main__":
    app = App()
    app.mainloop()

